{"ast":null,"code":"var _jsxFileName = \"/Users/iqraawan/Desktop/expenso-part2/client/src/context/GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\nimport axios from 'axios'; // Initial state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  transactions: []\n}; // Create context\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); // Provider component\n\nexport const GlobalProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(AppReducer, initialState); // Actions\n\n  async function getTransactions() {\n    try {\n      const res = await axios.get('/api/v1/transactions'); //calling from Transaction list and fetches transactions from backend\n\n      dispatch({\n        type: 'GET_TRANSACTIONS',\n        payload: res.data.data\n      });\n    } catch (err) {\n      dispatch({\n        type: 'TRANSACTION_ERROR',\n        payload: err.response.data.error\n      });\n    }\n  }\n\n  function deleteTransaction(id) {\n    dispatch({\n      type: 'DELETE_TRANSACTION',\n      payload: id\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: 'ADD_TRANSACTION',\n      payload: transaction\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions,\n      deleteTransaction,\n      addTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 13\n  }, this);\n};\n\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/Users/iqraawan/Desktop/expenso-part2/client/src/context/GlobalState.js"],"names":["React","createContext","useReducer","AppReducer","axios","initialState","transactions","GlobalContext","GlobalProvider","children","state","dispatch","getTransactions","res","get","type","payload","data","err","response","error","deleteTransaction","id","addTransaction","transaction"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE;AADG,CAArB,C,CAIA;;AACA,OAAO,MAAMC,aAAa,gBAAGN,aAAa,CAACI,YAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAMG,cAAc,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,UAAU,CAACC,UAAD,EAAaE,YAAb,CAApC,CAD4C,CAG5C;;AACA,iBAAeO,eAAf,GAAiC;AAC7B,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAU,sBAAV,CAAlB,CADE,CACoD;;AAEtDH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAE,kBADC;AAEPC,QAAAA,OAAO,EAAEH,GAAG,CAACI,IAAJ,CAASA;AAFX,OAAD,CAAR;AAID,KAPD,CAOE,OAAOC,GAAP,EAAY;AACZP,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAE,mBADC;AAEPC,QAAAA,OAAO,EAAEE,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBG;AAFpB,OAAD,CAAR;AAID;AACF;;AAEH,WAASC,iBAAT,CAA2BC,EAA3B,EAA+B;AAC3BX,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAE,oBADD;AAELC,MAAAA,OAAO,EAAEM;AAFJ,KAAD,CAAR;AAIH;;AAED,WAASC,cAAT,CAAwBC,WAAxB,EAAqC;AACjCb,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAE,iBADD;AAELC,MAAAA,OAAO,EAAEQ;AAFJ,KAAD,CAAR;AAIH;;AAED,sBAAQ,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AACnClB,MAAAA,YAAY,EAAEI,KAAK,CAACJ,YADe;AAEnCe,MAAAA,iBAFmC;AAGnCE,MAAAA;AAHmC,KAA/B;AAAA,cAKHd;AALG;AAAA;AAAA;AAAA;AAAA,UAAR;AAOH,CAzCM;;GAAMD,c;;KAAAA,c","sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\nimport axios from 'axios';\n\n// Initial state\nconst initialState = {\n    transactions: []\n}\n\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Provider component\nexport const GlobalProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n\n    // Actions\n    async function getTransactions() {\n        try {\n          const res = await axios.get('/api/v1/transactions');  //calling from Transaction list and fetches transactions from backend\n    \n          dispatch({\n            type: 'GET_TRANSACTIONS',\n            payload: res.data.data\n          });\n        } catch (err) {\n          dispatch({\n            type: 'TRANSACTION_ERROR',\n            payload: err.response.data.error\n          });\n        }\n      }\n\n    function deleteTransaction(id) {\n        dispatch({\n            type: 'DELETE_TRANSACTION',\n            payload: id\n        });\n    }\n\n    function addTransaction(transaction) {\n        dispatch({\n            type: 'ADD_TRANSACTION',\n            payload: transaction\n        });\n    }\n\n    return (<GlobalContext.Provider value={{\n        transactions: state.transactions,\n        deleteTransaction,\n        addTransaction\n    }}>\n        {children}\n    </GlobalContext.Provider>);\n}"]},"metadata":{},"sourceType":"module"}